<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="theme-color" content="black">
  <link rel="manifest" href="/manifest.json">

  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  <link rel="icon" type="image/png" href="/favicon-32x32.png" sizes="32x32">
  <link rel="icon" type="image/png" href="/favicon-16x16.png" sizes="16x16">
  <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">

  <title>{{ title }}</title>
  <link href="https://cdn.jsdelivr.net/npm/prismjs@v1/themes/prism.css" rel="stylesheet" />
  {% if css == "" %}
  <link rel="stylesheet" media="all" href="/css/main.css">
  {% else %}
  <link rel="stylesheet" media="all" href="{{ css }}">
  {% endif %}


  <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
  <script id="MathJax-script" async
          src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
  </script>

  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
          })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-89488611-1', 'auto');
    ga('send', 'pageview');
  </script>

</head>
<body>
  {# {% if header %}
    {{ header | safe }}
  {% else %} #}
    <header role="banner">
      <div>
        <a href="/"><img src="/assets/icon.svg"/></a>
      </div>
      <div>
        <a href="/">home</a> | <a href="/library">library</a> | <a href="/resume">resume</a>
      </div>
    </header>
  {# {% endif %} #}
  <main class="page-content" aria-label="Content">
    {{ content | safe }}
  </main>

  <script>
    // WebSocket-based reload
    function setupWebSocket() {
      const ws = new WebSocket(`ws://${window.location.host}/_debug/reload2`);
      let reconnectAttempts = 0;
      const maxReconnectAttempts = 3;
      
      ws.onmessage = function(event) {
        console.log("WebSocket message received, reloading page");
        window.location.reload();
      };

      ws.onclose = function() {
        if (reconnectAttempts < maxReconnectAttempts) {
          console.log(`WebSocket connection closed, attempting to reconnect (attempt ${reconnectAttempts + 1}/${maxReconnectAttempts})...`);
          reconnectAttempts++;
          setTimeout(setupWebSocket, 1000);
        } else {
          console.log("Max reconnection attempts reached, stopping WebSocket connection");
        }
      };

      ws.onerror = function(err) {
        console.error("WebSocket error:", err);
        if (reconnectAttempts < maxReconnectAttempts) {
          console.log(`WebSocket error occurred, attempting to reconnect (attempt ${reconnectAttempts + 1}/${maxReconnectAttempts})...`);
          reconnectAttempts++;
          setTimeout(setupWebSocket, 1000);
        } else {
          console.log("Max reconnection attempts reached, stopping WebSocket connection");
        }
        ws.close();
      };
    }

    // Start WebSocket connection
    setupWebSocket();
  </script>
</body>
</html> 